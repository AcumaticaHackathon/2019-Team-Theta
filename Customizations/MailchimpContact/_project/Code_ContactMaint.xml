<Graph ClassName="ContactMaint" Source="#CDATA" IsNew="True" FileType="ExistingGraph">
    <CDATA name="Source"><![CDATA[using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using PX.Common;
using PX.Data;
using PX.Objects.AR;
using PX.Objects.CR.MassProcess;
using PX.Objects.GL;
using PX.Objects.CS;
using PX.Objects.EP;
using PX.SM;
using PX.Objects;
using PX.Objects.CR;
using MailChimp.Net.Interfaces;
using MailChimp.Net.Core;
using MailChimp.Net;
using System.Threading.Tasks;

namespace PX.Objects.CR
{
  public class ContactMaint_Extension : PXGraphExtension<ContactMaint>
  {
        const string apiKey = "a17054e2dd2511c4f5ffad9f59c799a9-us20";
        IMailChimpManager manager = new MailChimpManager(apiKey);
        List<MailChimp.Net.Models.Activity> activityList = new List<MailChimp.Net.Models.Activity>();
        IEnumerable<MailChimp.Net.Models.Activity> fiteredActivitiesList = new List<MailChimp.Net.Models.Activity>();

        #region Event Handlers

        public PXAction<PX.Objects.CR.Contact> SyncMCActivities;

        [PXButton(CommitChanges = true)]
        [PXUIField(DisplayName = "Sync MC Activities")]
        protected void syncMCActivities()
        {
            List<MailChimp.Net.Models.Activity> result = new List<MailChimp.Net.Models.Activity>();
            var myTask = getMCActivities();
            try
            {
                myTask.Wait();
                result = myTask.Result;
                CRActivityMaint graph = PXGraph.CreateInstance<CRActivityMaint>();
                fiteredActivitiesList = result.Where(p => !Base.Activities.Select().RowCast<CRActivity>().ToList().Any(p2 => p2.CreatedDateTime.ToString() == p.Timestamp));
                registerActivities(result, graph);
            }
            catch (Exception ex)
            {
                string err = ex.InnerException.ToString();
            }
        }

        private static void registerActivities(List<MailChimp.Net.Models.Activity> result, CRActivityMaint graph)
        {
            foreach(MailChimp.Net.Models.Activity activity in result)
            {
                int x = 0;
            }
        }

        //GEt MCGroups
        public async Task<List<MailChimp.Net.Models.Activity>> getMCActivities()
        {
            ContactMaint graph = PXGraph.CreateInstance<ContactMaint>();
            //Get All Lists on MC
            try
            {
                var mailChimpActivitiesCollection = await manager.Members.GetActivitiesAsync("8951f9ff7b", Base.Contact.Current.EMail).ConfigureAwait(false);
            }
            catch (Exception ex)
            {

                throw ex;
            }
            //Get Interest-Categories

            //mailChimpActivitiesCollection.ForEach(activity => this.activityList.Add(activity));


            return activityList;

        }
        #endregion
    } 
}]]></CDATA>
</Graph>